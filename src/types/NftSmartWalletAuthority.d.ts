/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface NftSmartWalletAuthorityInterface extends ethers.utils.Interface {
  functions: {
    "concludeNFTAgreement(address,address,address,uint256)": FunctionFragment;
    "createWallet()": FunctionFragment;
    "lendingRegistry()": FunctionFragment;
    "transferNFT(address,address,address,uint256)": FunctionFragment;
    "updateWalletOwner(address,address)": FunctionFragment;
    "walletToOwner(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "concludeNFTAgreement",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferNFT",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWalletOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "walletToOwner",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "concludeNFTAgreement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWalletOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "walletToOwner",
    data: BytesLike
  ): Result;

  events: {
    "NewWalletOwner(address,address)": EventFragment;
    "WalletCreated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewWalletOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletCreated"): EventFragment;
}

export class NftSmartWalletAuthority extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: NftSmartWalletAuthorityInterface;

  functions: {
    concludeNFTAgreement(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "concludeNFTAgreement(address,address,address,uint256)"(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    createWallet(overrides?: Overrides): Promise<ContractTransaction>;

    "createWallet()"(overrides?: Overrides): Promise<ContractTransaction>;

    lendingRegistry(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "lendingRegistry()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    transferNFT(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferNFT(address,address,address,uint256)"(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateWalletOwner(
      _wallet: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateWalletOwner(address,address)"(
      _wallet: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    walletToOwner(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "walletToOwner(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;
  };

  concludeNFTAgreement(
    _lender: string,
    _borrower: string,
    _nft: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "concludeNFTAgreement(address,address,address,uint256)"(
    _lender: string,
    _borrower: string,
    _nft: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  createWallet(overrides?: Overrides): Promise<ContractTransaction>;

  "createWallet()"(overrides?: Overrides): Promise<ContractTransaction>;

  lendingRegistry(overrides?: CallOverrides): Promise<string>;

  "lendingRegistry()"(overrides?: CallOverrides): Promise<string>;

  transferNFT(
    _lender: string,
    _borrower: string,
    _nft: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferNFT(address,address,address,uint256)"(
    _lender: string,
    _borrower: string,
    _nft: string,
    _tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateWalletOwner(
    _wallet: string,
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateWalletOwner(address,address)"(
    _wallet: string,
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  walletToOwner(_wallet: string, overrides?: CallOverrides): Promise<string>;

  "walletToOwner(address)"(
    _wallet: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    concludeNFTAgreement(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "concludeNFTAgreement(address,address,address,uint256)"(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createWallet(overrides?: CallOverrides): Promise<string>;

    "createWallet()"(overrides?: CallOverrides): Promise<string>;

    lendingRegistry(overrides?: CallOverrides): Promise<string>;

    "lendingRegistry()"(overrides?: CallOverrides): Promise<string>;

    transferNFT(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferNFT(address,address,address,uint256)"(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWalletOwner(
      _wallet: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateWalletOwner(address,address)"(
      _wallet: string,
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    walletToOwner(_wallet: string, overrides?: CallOverrides): Promise<string>;

    "walletToOwner(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    NewWalletOwner(wallet: string | null, newOwner: string | null): EventFilter;

    WalletCreated(wallet: null): EventFilter;
  };

  estimateGas: {
    concludeNFTAgreement(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "concludeNFTAgreement(address,address,address,uint256)"(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    createWallet(overrides?: Overrides): Promise<BigNumber>;

    "createWallet()"(overrides?: Overrides): Promise<BigNumber>;

    lendingRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "lendingRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferNFT(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferNFT(address,address,address,uint256)"(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateWalletOwner(
      _wallet: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateWalletOwner(address,address)"(
      _wallet: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    walletToOwner(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "walletToOwner(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    concludeNFTAgreement(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "concludeNFTAgreement(address,address,address,uint256)"(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    createWallet(overrides?: Overrides): Promise<PopulatedTransaction>;

    "createWallet()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    lendingRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lendingRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferNFT(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferNFT(address,address,address,uint256)"(
      _lender: string,
      _borrower: string,
      _nft: string,
      _tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateWalletOwner(
      _wallet: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateWalletOwner(address,address)"(
      _wallet: string,
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    walletToOwner(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "walletToOwner(address)"(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
